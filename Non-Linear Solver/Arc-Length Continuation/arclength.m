%********************** INPUT PARAMTERS ******************************* %
%
% q        : epsilon value at which ALC is to be peformed
% lambda_0 : initial value of lambda at some point.
% lambda_1 : initial value of lambda at apoint close to lambda_0
% sol_ep   : solution branch generated by analytic continuation.
%             Used to generate the first initial guess
%
%********************* OUTPUT VALUES ********************************** %
% 
% sol_arc        : solution returned by arc-length continuation
% lambda_values  : array containing lambda values at which a converged 
%                  solution has been has found.
% norm_la_alc    : stores the 2-norm of each solution in sol_arc
%
%***********************************************************************%

function[sol_arc,lambda_values,norm_la_alc] = arclength(q,lambda_0,lambda_1,sol_ep)

count=0;

f_actual = zeros(961,1);
u_actual = zeros(961,1);
h=1/30;
for i=1:31
    for j=1:31
        count = ((j-1)*31 + i);
        x_i = (i-1)*h;  %setting up the vector with actual solutions!!
                        %solving the given equation subject to the boundary conditions that
                        %u(x,y) = 0 at all the boundaries, we get u(x,y) =
                        %sin(pi*m*x)sin(pi*n*y).
        y_j = (j-1)*h;        
        f_actual(count)= sin(pi*x_i);% to generate the RHS of Au = f
    end
end
  
sol0 = sol_ep(109,:)';
sol1 = sol_ep(108,:)';
L=0;
U=0;
P=0;
order = [1:962];
var_count = 0;
norm_la_alc(1) = norm(sol0);
norm_la_alc(2) = norm(sol1);
lambda_values(1) = lambda_0;
lambda_values(2) = lambda_1;

%Using arc-length continuation ONCE to get a good initial guess u_2 and
%lambda_2

s = sqrt( (lambda_0-lambda_1)^2 + (norm(sol0-sol1))^2 );
[J_aug,R_aug,J_s] = Jac_Res_ALC(sol0,sol1,f_actual,h,lambda_0,lambda_1,q,31,-s);


sol_temp = J_aug\J_s;
delu_dels = sol_temp(1:961);
del_la_dels = sol_temp(962);
sol0 = sol1;
sol1 = (sol1 + delu_dels*(-0.5));
%u_new = sol1' + delu_dels*(0.1486);
lambda_0 = lambda_1;
lambda_1 = lambda_1 + (del_la_dels*(-0.5));

%Beginning of loop for Arc length continuation

while(var_count<80)

var_count = var_count + 1;

[sol_arc(var_count,:),sol_lambda,J_aug,J_s,P] = newton_ALC(sol0,sol1,-0.5,lambda_0,lambda_1,q,f_actual,0.0001,30);

sol_temp = Substitute((J_aug),order,962,(P*J_s));

delu_dels = sol_temp(1:961);
del_la_dels = sol_temp(962);

sol0 = sol_arc(var_count,:)';
lambda_0 = sol_lambda;
sol1 = (sol1 + delu_dels*(-0.5));
lambda_1 = lambda_1 + (del_la_dels*(-0.5));

lambda_values(2+var_count) = lambda_0;
norm_la_alc(2+var_count) = norm(sol_arc(var_count,:));

end

end
